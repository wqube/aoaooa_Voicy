import json
import random
import time
from aiogram import types
from aiogram.types import ParseMode

from config import bot, dp
from aiogram.utils.markdown import hbold


# @dp.message_handler(commands="start")
async def start(message: types.Message):
    language_button_en = types.InlineKeyboardButton(text="En üá¨üáß", callback_data="en")
    language_button_ru = types.InlineKeyboardButton(text="Ru üá∑üá∫", callback_data="ru")
    language_keyboard = types.InlineKeyboardMarkup(row_width=2).add(language_button_en, language_button_ru)

    user_id = message.from_user.id.__str__()

    with open("json_files/users.json", encoding="utf-8") as file:
        users_info = json.load(file)

    if user_id not in users_info:
        await message.answer(
            hbold("üëã Hello! Please, choose language!\n\nüëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–µ—Ç–µ —è–∑—ã–∫!"),
            reply_markup=language_keyboard,
            disable_notification=True)

    else:
        if users_info[str(user_id)]['language'] == "ru":
            await message.answer(
                hbold("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! üëã\n\n–°–∫–∏–¥—ã–≤–∞–π –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–µ—Ä–µ–≤–µ–¥—É –µ–≥–æ –≤ —Ç–µ–∫—Å—Ç, –ø–æ–¥—Ä–æ–±–Ω–µ–µ: /help"),
                disable_notification=True)
        elif users_info[str(user_id)]['language'] == "en":
            await message.answer(
                hbold("Greetings! üëã\n\nSend me a voice message and I'll translate it into text, more: /help"),
                disable_notification=True)


# @dp.callback_query_handlers(text="en")
async def callback_choose_language_en(callback: types.CallbackQuery):
    user_id = callback.from_user.id.__str__()

    with open("json_files/users.json", encoding="utf-8") as file:
        users_info = json.load(file)

    if user_id not in users_info:
        new_dict = {}
        new_dict[user_id] = {
            "is_admin": "False",
            "language": "en"
        }
        users_info.update(new_dict)

        with open("json_files/users.json", "w", encoding="utf-8") as file:
            json.dump(users_info, file, indent=4, ensure_ascii=False)

        await callback.message.answer(hbold(
            "You have successfully selected English language! üá¨üáß\n\nSend me a voice message and I'll translate it into text, more: /help"))
        await callback.answer()

    elif users_info[user_id]['language'] == 'ru':
        users_info[user_id]['language'] = "en"

        with open("json_files/users.json", "w", encoding="utf-8") as file:
            json.dump(users_info, file, indent=4, ensure_ascii=False)

        await callback.answer("You have successfully selected English language! üá¨üáß", show_alert=True)
    else:
        await callback.answer("‚ùó You have already chosen this language, please don't spam ‚ùó", show_alert=True)


# @dp.callback_query_handlers(text="ru")
async def callback_choose_language_ru(callback: types.CallbackQuery):
    user_id = callback.from_user.id.__str__()

    with open("json_files/users.json", encoding="utf-8") as file:
        users_info = json.load(file)

    if user_id not in users_info:
        new_dict = {}
        new_dict[user_id] = {
            "is_admin": "False",
            "language": "ru"
        }
        users_info.update(new_dict)

        with open("json_files/users.json", "w", encoding="utf-8") as file:
            json.dump(users_info, file, indent=4, ensure_ascii=False)

        await callback.message.answer(hbold(
            "üá∑üá∫ –û—Ç–ª–∏—á–Ω–æ, —Ç—ã —Å–ø—Ä–∞–≤–∏–ª—Å—è —Å –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —è –±—É–¥—É —Å —Ç–æ–±–æ–π –æ–±—â–∞—Ç—å—Å—è (–µ–≥–æ –º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é)\n\n–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å —Å–∫–∏–¥—ã–≤–∞—Ç—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —è –ø–µ—Ä–µ–≤–µ–¥—É –≤ —Ç–µ–∫—Å—Ç, –ø–æ–¥—Ä–æ–±–Ω–µ–µ: /help"))
        await callback.answer()

    elif users_info[user_id]['language'] == 'en':
        users_info[user_id]['language'] = "ru"

        with open("json_files/users.json", "w", encoding="utf-8") as file:
            json.dump(users_info, file, indent=4, ensure_ascii=False)

        await callback.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–ª–∏ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫! üá∑üá∫", show_alert=True)
    else:
        await callback.answer("‚ùó –í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ —ç—Ç–æ—Ç —è–∑—ã–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —Å–ø–∞–º—å—Ç–µ ‚ùó", show_alert=True)


# @dp.register_message_handler(commands="choose_language")
async def choose_language(message: types.Message):
    language_button_en = types.InlineKeyboardButton(text="En üá¨üáß", callback_data="en")
    language_button_ru = types.InlineKeyboardButton(text="Ru üá∑üá∫", callback_data="ru")
    language_keyboard = types.InlineKeyboardMarkup(row_width=2).add(language_button_en, language_button_ru)

    await message.answer(
        hbold("üëã Hello! Please, choose language!\n\nüëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–µ—Ç–µ —è–∑—ã–∫!"),
        reply_markup=language_keyboard,
        disable_notification=True)


# @dp.message_handler(commands="help")
async def help(message: types.Message):
    user_id = message.from_user.id.__str__()
    with open("json_files/users.json", encoding="utf-8") as file:
        users_info = json.load(file)

    if users_info[user_id]['language'] == "ru":
        await bot.send_message(message.from_user.id,
            "*–ü—Ä–∏–≤–µ—Ç–∏–∫ –∑–∞–π–∫–∞ üòò*\n\n–í–∏–¥–∏–º–æ, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –º–æ–µ–π —Ä–∞–±–æ—Ç—ã, –Ω—É —Ç–∞–∫ –≤–æ—Ç:\n\n"
            "–Ø –±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–µ–∫—Å—Ç, –ø—Ä–æ—â–µ –≥–æ–≤–æ—Ä—è, –µ—Å–ª–∏ –≤–∞—à –Ω–µ –¥–∞–ª—ë–∫–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ —Ä–µ—à–∏—Ç, —á—Ç–æ –≤–∞–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω–æ –ø–æ—Å–ª—É—à–∞—Ç—å –µ–≥–æ –æ–±–≤–∞—Ä–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –≥–æ–ª–æ—Å–æ–∫ (—Ö–µ-—Ö–µ), –∞ –≤—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Ä—Ç–∏—Ç—å —Å–≤–æ–π –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –¥–µ–Ω—å –≥–æ–ª–æ—Å–æ–º —ç—Ç–æ–≥–æ —É—Ä–æ–¥–∞, —Ç–æ –º–æ–∂–µ—Ç–µ —Å–∫–∏–¥—ã–≤–∞—Ç—å –µ–≥–æ –≥–æ–ª–æ—Å–æ–≤—É—Ö—É –º–Ω–µ, —è –ø–æ—Å–ª—É—à–∞—é –µ–µ –∏ –ø–æ—á—Ç–∏ —Å—Ä–∞–∑—É –∂–µ –≤—ã–¥–∞–º –≤–∞–º —Ç–µ–∫—Å—Ç –¥–∞–Ω–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n*–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è! üíú*",
                               disable_notification=True, parse_mode=ParseMode.MARKDOWN)
    else:
        await bot.send_message(message.from_user.id,
            "*Hello! üëã*\n\nI am a bot designed to convert voice messages to text, just send it to me, and i will send you the text of this voice message\n\n*Enjoy using! üíú*",
                               disable_notification=True, parse_mode=ParseMode.MARKDOWN)


# @dp.message_handler()
async def all_messages(message: types.Message):
    o = ''
    mat = []
    che = []
    norm = []
    uwu = []

    with open("json_files/sticker_answer.json", encoding="utf-8") as file:
        sticker_answer = json.load(file)

    with open("json_files/cho.json", encoding="utf-8") as file:
        answer = json.load(file)

    with open("json_files/cenz.json", encoding="utf-8") as file:
        cenz_dict = json.load(file)

    for i in message.text.lower().split(" "):
        if i == "uwu":
            uwu.append(i)
        elif i in cenz_dict:
            mat.append(i)
        elif i in answer:
            o = i
            che.append(i)
        else:
            norm.append(i)

    if len(mat) >= 1:
        await bot.send_sticker(message.from_user.id, random.choice(sticker_answer))
    elif len(che) >= 1:
        await message.reply(f"–∞–Ω–∏{o} –Ω–æ—Ä–º–∞–ª—å–Ω–æ –æ–±—â–∞–π—Å—è")
    elif len(uwu) >= 1:
        await bot.send_voice(message.from_user.id, open("uwu-voice.oga", "rb"))
    else:
        msg = await message.answer(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —è –Ω–µ —Å–º–æ–≥–ª–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –í–∞—à—É –∫–æ–º–∞–Ω–¥—Éüòî.\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /help")
        time.sleep(3)
        await message.delete()
        await msg.delete()


def register_base_handlers(dp):
    dp.register_message_handler(start, commands="start")
    dp.register_callback_query_handler(callback_choose_language_en, text="en")
    dp.register_callback_query_handler(callback_choose_language_ru, text="ru")
    dp.register_message_handler(help, commands="help")
    dp.register_message_handler(choose_language, commands="choose_language")
    dp.register_message_handler(all_messages)
